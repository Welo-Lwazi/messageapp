import { useState, useRef, useEffect } from 'react'
import { Search, MoreVertical, Send, Plus, Paperclip, CornerUpLeft, Camera, UserPlus, Users, Edit2, UserMinus, X, Check, Trash2, Mic, Square, ArrowLeft, Play, Pause } from 'lucide-react'
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Checkbox } from "@/components/ui/checkbox"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

interface ChatMessage {
  id: number
  sender: string
  recipient?: string
  message: string
  time: string
  avatar: string
  isNewConversation?: boolean
  attachment?: {
    name: string
    url: string
    type: string
  }
  quotedMessage?: {
    id: number
    sender: string
    message: string
  }
  participants: string[]
  groupName?: string
  groupAvatar?: string
  readBy: string[]
}

interface User {
  id: number
  name: string
  avatar: string
}

export default function Component() {
  const [messages, setMessages] = useState<ChatMessage[]>([
    { id: 1, sender: 'Cyril Ralston', message: 'Photo', time: 'Yesterday', avatar: 'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/chatapp2-jWqrUWXCsknN46a1tdsij410fjft5R.JPG', participants: ['Cyril Ralston', 'You'], readBy: ['Cyril Ralston'] },
    { id: 2, sender: 'Michelina Mackley', message: 'Hello how are you?', time: '2:32 PM', avatar: '', participants: ['Michelina Mackley', 'You'], readBy: [] },
    { id: 3, sender: 'Group Chat', message: 'Welcome to the group!', time: '08:27 PM', avatar: '/placeholder.svg?height=40&width=40', participants: ['Jessi Maylin', 'Alice Johnson', 'Bob Smith', 'You'], groupName: 'Project Team', groupAvatar: '/placeholder.svg?height=40&width=40', readBy: ['Alice Johnson'] },
  ])
  const [selectedChat, setSelectedChat] = useState<ChatMessage | null>(null)
  const [inputMessage, setInputMessage] = useState('')
  const [attachment, setAttachment] = useState<File | null>(null)
  const [attachmentPreview, setAttachmentPreview] = useState<string | null>(null)
  const [replyingTo, setReplyingTo] = useState<ChatMessage | null>(null)
  const [isNewChatDialogOpen, setIsNewChatDialogOpen] = useState(false)
  const [isGroupMembersDialogOpen, setIsGroupMembersDialogOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [filteredMessages, setFilteredMessages] = useState<ChatMessage[]>(messages)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const groupAvatarInputRef = useRef<HTMLInputElement>(null)
  const [selectedUsers, setSelectedUsers] = useState<User[]>([])
  const [groupName, setGroupName] = useState('')
  const [groupAvatar, setGroupAvatar] = useState<File | null>(null)
  const [groupAvatarPreview, setGroupAvatarPreview] = useState<string | null>(null)
  const [participantSearchQuery, setParticipantSearchQuery] = useState('')
  const [newChatSearchQuery, setNewChatSearchQuery] = useState('')
  const [showChatTypeDialog, setShowChatTypeDialog] = useState(false)
  const [chatType, setChatType] = useState<'group' | 'one-off'>('group')
  const [oneOffMessage, setOneOffMessage] = useState('')
  const [isRecording, setIsRecording] = useState(false)
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null)
  const [recordingTime, setRecordingTime] = useState(0)
  const mediaRecorderRef = useRef<MediaRecorder | null>(null)
  const audioChunksRef = useRef<Blob[]>([])
  const [isMobileView, setIsMobileView] = useState(false)
  const [isPlaying, setIsPlaying] = useState(false)
  const audioRef = useRef<HTMLAudioElement | null>(null)

  const users: User[] = [
    { id: 1, name: 'Alice Johnson', avatar: '/placeholder.svg?height=40&width=40' },
    { id: 2, name: 'Bob Smith', avatar: '/placeholder.svg?height=40&width=40' },
    { id: 3, name: 'Charlie Brown', avatar: '/placeholder.svg?height=40&width=40' },
    { id: 4, name: 'Diana Prince', avatar: '/placeholder.svg?height=40&width=40' },
    { id: 5, name: 'Ethan Hunt', avatar: '/placeholder.svg?height=40&width=40' },
    { id: 6, name: 'Fiona Green', avatar: '/placeholder.svg?height=40&width=40' },
    { id: 7, name: 'George Wilson', avatar: '/placeholder.svg?height=40&width=40' },
    { id: 8, name: 'Hannah Baker', avatar: '/placeholder.svg?height=40&width=40' },
  ]

  useEffect(() => {
    const handleResize = () => {
      setIsMobileView(window.innerWidth < 768)
    }
    handleResize()
    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  useEffect(() => {
    const filtered = messages.filter(message =>
      message.sender.toLowerCase().includes(searchQuery.toLowerCase()) ||
      message.message.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (message.groupName && message.groupName.toLowerCase().includes(searchQuery.toLowerCase())) ||
      (message.recipient && message.recipient.toLowerCase().includes(searchQuery.toLowerCase()))
    )
    setFilteredMessages(sortMessagesByUnread(filtered))
  }, [searchQuery, messages])

  useEffect(() => {
    let interval: NodeJS.Timeout
    if (isRecording) {
      interval = setInterval(() => {
        setRecordingTime((prevTime) => prevTime + 1)
      }, 1000)
    }
    return () => clearInterval(interval)
  }, [isRecording])

  const sortMessagesByUnread = (msgs: ChatMessage[]) => {
    return msgs.sort((a, b) => {
      const aUnread = !a.readBy.includes('You')
      const bUnread = !b.readBy.includes('You')
      if (aUnread && !bUnread) return -1
      if (!aUnread && bUnread) return 1
      return 0
    })
  }

  const handleChatSelect = (chat: ChatMessage) => {
    setSelectedChat(chat)
    if (chat.participants.length > 2) {
      setGroupName(chat.groupName || '')
      setGroupAvatarPreview(chat.groupAvatar || null)
    }
    setMessages(messages.map(m => 
      m.id === chat.id ? { ...m, readBy: Array.from(new Set([...m.readBy, 'You'])) } : m
    ))
  }

  const handleSendMessage = () => {
    if ((inputMessage.trim() || attachment || audioBlob) && selectedChat) {
      const newMessage: ChatMessage = {
        id: Date.now(),
        sender: 'You',
        message: inputMessage,
        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        avatar: '/placeholder.svg?height=40&width=40',
        participants: selectedChat.participants,
        groupName: selectedChat.groupName,
        groupAvatar: selectedChat.groupAvatar,
        readBy: ['You']
      }
      if (attachment) {
        newMessage.attachment = {
          name: attachment.name,
          url: URL.createObjectURL(attachment),
          type: attachment.type
        }
      } else if (audioBlob) {
        newMessage.attachment = {
          name: 'Voice Note',
          url: URL.createObjectURL(audioBlob),
          type: 'audio/webm'
        }
        newMessage.message = 'Voice Note'
      }
      if (replyingTo) {
        newMessage.quotedMessage = {
          id: replyingTo.id,
          sender: replyingTo.sender,
          message: replyingTo.message
        }
      }
      
      const updatedMessages = [...messages, newMessage]
      setMessages(updatedMessages)
      setFilteredMessages(sortMessagesByUnread(updatedMessages))
      setSelectedChat(prevChat => {
        if (prevChat) {
          return {
            ...prevChat,
            message: newMessage.message,
            time: newMessage.time,
            isNewConversation: false
          }
        }
        return prevChat
      })
      
      setInputMessage('')
      setAttachment(null)
      setAttachmentPreview(null)
      setReplyingTo(null)
      setAudioBlob(null)
    }
  }

  const handleNewChat = () => {
    if (selectedUsers.length > 0) {
      if (selectedUsers.length > 1) {
        setShowChatTypeDialog(true)
      } else {
        createNewChat('one-off')
      }
    }
  }

  const createNewChat = (type: 'group' | 'one-off') => {
    const participants = [...selectedUsers.map(u => u.name), 'You']
    if (type === 'group') {
      const newChat: ChatMessage = {
        id: Date.now(),
        sender: 'Group Chat',
        message: 'Start a new conversation',
        time: 'Now',
        avatar: '/placeholder.svg?height=40&width=40',
        isNewConversation: true,
        participants: participants,
        groupName: 'New Group',
        groupAvatar: '/placeholder.svg?height=40&width=40',
        readBy: ['You']
      }
      setMessages([newChat, ...messages])
      setSelectedChat(newChat)
      setGroupName('New Group')
      setGroupAvatarPreview('/placeholder.svg?height=40&width=40')
      setIsGroupMembersDialogOpen(true)
    } else {
      sendOneOffMessage(participants)
    }
    setSelectedUsers([])
    setIsNewChatDialogOpen(false)
    setShowChatTypeDialog(false)
    setOneOffMessage('')
  }

  const sendOneOffMessage = (participants: string[]) => {
    const newChats = participants.filter(p => p !== 'You').map(participant => ({
      id: Date.now() + Math.random(),
      sender: 'You',
      recipient: participant,
      message: oneOffMessage,
      time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      avatar: '/placeholder.svg?height=40&width=40',
      isNewConversation: false,
      participants: [participant, 'You'],
      readBy: ['You']
    }))
    setMessages([...newChats, ...messages])
    setSelectedChat(newChats[0])
  }

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      setAttachment(file)
      if (file.type.startsWith('image/')) {
        const reader = new FileReader()
        reader.onload = (e) => {
          setAttachmentPreview(e.target?.result as string)
        }
        reader.readAsDataURL(file)
      } else {
        setAttachmentPreview(null)
      }
    }
  }

  const handleGroupAvatarChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      setGroupAvatar(file)
      const reader = new FileReader()
      reader.onload = (e) => {
        setGroupAvatarPreview(e.target?.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  const handleAttachClick = () => {
    fileInputRef.current?.click()
  }

  const handleGroupAvatarClick = () => {
    groupAvatarInputRef.current?.click()
  }

  const handleReply = (message: ChatMessage) => {
    setReplyingTo(message)
  }

  const handleRemoveAttachment = () => {
    setAttachment(null)
    setAttachmentPreview(null)
  }

  const toggleUserSelection = (user: User) => {
    setSelectedUsers(prevSelected =>
      prevSelected.find(u => u.id === user.id)
        ? prevSelected.filter(u => u.id !== user.id)
        : [...prevSelected, user]
    )
  }

  const handleAddParticipant = (user: User) => {
    if (selectedChat && !selectedChat.participants.includes(user.name)) {
      const updatedChat = {
        ...selectedChat,
        participants: [...selectedChat.participants, user.name]
      }
      setSelectedChat(updatedChat)
      setMessages(messages.map(m => m.id === selectedChat.id ? updatedChat : m))
    }
  }

  const handleRemoveParticipant = (userName: string) => {
    if (selectedChat && selectedChat.participants.includes(userName)) {
      const updatedChat = {
        ...selectedChat,
        participants: selectedChat.participants.filter(p => p !== userName)
      }
      setSelectedChat(updatedChat)
      setMessages(messages.map(m => m.id === selectedChat.id ? updatedChat : m))
    }
  }

  const handleUpdateGroup = () => {
    if (selectedChat && selectedChat.participants.length > 2) {
      const updatedChat = {
        ...selectedChat,
        groupName: groupName,
        groupAvatar: groupAvatarPreview || selectedChat.groupAvatar
      }
      setSelectedChat(updatedChat)
      setMessages(messages.map(m => m.id === selectedChat.id ? updatedChat : m))
      setIsGroupMembersDialogOpen(false)
    }
  }

  const handleDeleteGroup = () => {
    if (selectedChat) {
      const updatedMessages = messages.filter(m => m.id !== selectedChat.id)
      setMessages(updatedMessages)
      setFilteredMessages(sortMessagesByUnread(updatedMessages))
      setSelectedChat(null)
      setIsGroupMembersDialogOpen(false)
    }
  }

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      mediaRecorderRef.current = new MediaRecorder(stream)
      audioChunksRef.current = []

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data)
        }
      }

      mediaRecorderRef.current.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' })
        setAudioBlob(audioBlob)
        setIsRecording(false)
        setRecordingTime(0)
      }

      mediaRecorderRef.current.start()
      setIsRecording(true)
    } catch (error) {
      console.error('Error accessing microphone:', error)
    }
  }

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop()
      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop())
    }
  }

  const togglePlayPause = (audioUrl: string) => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause()
      } else {
        audioRef.current.src = audioUrl
        audioRef.current.play()
      }
      setIsPlaying(!isPlaying)
    }
  }

  const filteredUsers = users.filter(user => 
    user.name.toLowerCase().includes(participantSearchQuery.toLowerCase()) &&
    !selectedChat?.participants.includes(user.name)
  )

  const filteredNewChatUsers = users.filter(user =>
    user.name.toLowerCase().includes(newChatSearchQuery.toLowerCase())
  )

  return (
    <div className="flex h-screen bg-purple-50">
      {(!isMobileView || !selectedChat) && (
        <div className={`${isMobileView ? 'w-full' : 'w-1/3'} border-r border-gray-200 p-4`}>
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold">Chats</h1>
            <Dialog open={isNewChatDialogOpen} onOpenChange={setIsNewChatDialogOpen}>
              <DialogTrigger asChild>
                <Button className="bg-purple-600 text-white hover:bg-purple-700">
                  <Plus className="h-5 w-5 mr-2" />
                  New Chat
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[425px] md:max-w-[600px] lg:max-w-[900px] h-[80vh] flex flex-col">
                <DialogHeader>
                  <DialogTitle>Start a new chat</DialogTitle>
                </DialogHeader>
                <div className="flex flex-col md:flex-row flex-grow overflow-hidden">
                  <div className="w-full md:w-1/3 border-b md:border-b-0 md:border-r p-4 flex flex-col">
                    <Input
                      type="text"
                      placeholder="Search contacts..."
                      value={newChatSearchQuery}
                      onChange={(e) => setNewChatSearchQuery(e.target.value)}
                      className="mb-4"
                    />
                    <ScrollArea className="flex-grow">
                      {filteredNewChatUsers.map((user) => (
                        <div
                          key={user.id}
                          className="flex items-center space-x-3 p-2 hover:bg-gray-100 rounded-lg cursor-pointer"
                          onClick={() => toggleUserSelection(user)}
                        >
                          <Checkbox
                            checked={selectedUsers.some(u => u.id === user.id)}
                            onCheckedChange={() => toggleUserSelection(user)}
                          />
                          <Avatar>
                            <AvatarImage src={user.avatar} alt={user.name} />
                            <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                          </Avatar>
                          <span>{user.name}</span>
                        </div>
                      ))}
                    </ScrollArea>
                  </div>
                  <div className="w-full md:w-2/3 p-4 flex flex-col">
                    <h3 className="text-lg font-semibold mb-4">Selected Contacts</h3>
                    <ScrollArea className="flex-grow mb-4">
                      {isMobileView ? (
                        <div className="grid grid-cols-2 gap-2">
                          {selectedUsers.slice(0, 4).map((user) => (
                            <div key={user.id} className="flex items-center justify-between p-2 bg-gray-100 rounded-lg">
                              <div className="flex items-center space-x-2">
                                <Avatar className="w-8 h-8">
                                  <AvatarImage src={user.avatar} alt={user.name} />
                                  <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <span className="text-sm truncate">{user.name}</span>
                              </div>
                              <Button variant="ghost" size="sm" onClick={() => toggleUserSelection(user)}>
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      ) : (
                        selectedUsers.map((user) => (
                          <div key={user.id} className="flex items-center justify-between p-2 bg-gray-100 rounded-lg mb-2">
                            <div className="flex items-center space-x-3">
                              <Avatar>
                                <AvatarImage src={user.avatar} alt={user.name} />
                                <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                              </Avatar>
                              <span>{user.name}</span>
                            </div>
                            <Button variant="ghost" size="sm" onClick={() => toggleUserSelection(user)}>
                              <X className="h-4 w-4" />
                            </Button>
                          </div>
                        ))
                      )}
                    </ScrollArea>
                    <Button onClick={handleNewChat} className="w-full" disabled={selectedUsers.length === 0}>
                      Start Chat
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
          
          <div className="relative mb-6">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <Input
              type="text"
              placeholder="Search..."
              className="pl-10 bg-white"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <Tabs defaultValue="all">
            <TabsList className="grid w-full grid-cols-2 mb-6">
              <TabsTrigger value="all">All Chats</TabsTrigger>
              <TabsTrigger value="contacts">Contacts</TabsTrigger>
            </TabsList>
            <TabsContent value="all">
              <div className="space-y-2">
                {filteredMessages.map((message) => (
                  <div 
                    key={message.id} 
                    className={`flex items-center p-3 rounded-lg cursor-pointer ${selectedChat?.id === message.id ? 'bg-purple-100 border border-purple-300' : 'bg-white'}`}
                    onClick={() => handleChatSelect(message)}
                  >
                    <div className="flex-shrink-0 mr-3 relative">
                      <Avatar className="w-12 h-12">
                        {message.participants.length > 2 ? (
                          <AvatarImage src={message.groupAvatar || '/placeholder.svg?height=40&width=40'} alt={message.groupName || 'Group'} />
                        ) : (
                          message.avatar ? (
                            <AvatarImage src={message.avatar} alt={message.sender} />
                          ) : (
                            <AvatarFallback className="bg-teal-500 text-white text-xl">
                              {message.sender.charAt(0)}
                            </AvatarFallback>
                          )
                        )}
                      </Avatar>
                      {message.participants.length > 2 && (
                        <div className="absolute bottom-0 right-0 bg-purple-500 rounded-full p-1">
                          <Users className="h-3 w-3 text-white" />
                        </div>
                      )}
                      {!message.readBy.includes('You') && (
                        <div className="absolute top-0 left-0 w-3 h-3 bg-green-500 rounded-full border-2 border-white" />
                      )}
                    </div>
                    <div className="flex-grow">
                      <h3 className="font-semibold text-gray-900">
                        {message.participants.length > 2 
                          ? (message.groupName || 'Group Chat') 
                          : (message.recipient || message.sender)}
                      </h3>
                      <p className="text-sm text-gray-500 flex items-center">
                        {message.message === 'Photo' && <Camera className="w-4 h-4 mr-1" />}
                        {message.message === 'Voice Note' && <Mic className="w-4 h-4 mr-1" />}
                        {message.sender === 'You' && 'You: '}
                        {message.message}
                      </p>
                    </div>
                    <div className="flex-shrink-0 ml-3 text-right">
                      <p className="text-xs text-gray-500">{message.time}</p>
                      {message.readBy.includes('You') && (
                        <Check className="h-4 w-4 text-green-500 inline-block" />
                      )}
                      <Button variant="ghost" size="sm" className="mt-1">
                        <MoreVertical className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </TabsContent>
            <TabsContent value="contacts">
              <div className="space-y-2">
                <Input type="text" placeholder="Search contacts" className="mb-4" />
                {users.map((user) => (
                  <div 
                    key={user.id} 
                    className="flex items-center space-x-4 p-3 hover:bg-purple-100 rounded-lg cursor-pointer"
                    onClick={() => {
                      setSelectedUsers([user])
                      handleNewChat()
                    }}
                  >
                    <Avatar>
                      <AvatarImage src={user.avatar} alt={user.name} />
                      <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <h3 className="font-semibold">{user.name}</h3>
                    </div>
                    <Button variant="ghost" size="sm">
                      Chat
                    </Button>
                  </div>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      )}
      {(!isMobileView || selectedChat) && (
        <div className="flex-1 flex flex-col">
          {selectedChat && (
            <div className="flex items-center space-x-2 p-4 border-b border-gray-200">
              {isMobileView && (
                <Button variant="ghost" size="sm" onClick={() => setSelectedChat(null)}>
                  <ArrowLeft className="h-5 w-5" />
                </Button>
              )}
              <Avatar>
                {selectedChat.participants.length > 2 ? (
                  <AvatarImage src={selectedChat.groupAvatar || '/placeholder.svg?height=40&width=40'} alt={selectedChat.groupName || 'Group'} />
                ) : (
                  <AvatarImage src={selectedChat.avatar} alt={selectedChat.sender} />
                )}
                <AvatarFallback>{selectedChat.sender.charAt(0)}</AvatarFallback>
              </Avatar>
              <div>
                <h2 className="text-lg font-semibold">
                  {selectedChat.participants.length > 2 
                    ? (selectedChat.groupName || 'Group Chat') 
                    : (selectedChat.recipient || selectedChat.sender)}
                </h2>
                {selectedChat.participants.length > 2 && (
                  <p className="text-sm text-gray-500">{selectedChat.participants.length} participants</p>
                )}
              </div>
              {selectedChat.participants.length > 2 && (
                <Button variant="outline" size="sm" onClick={() => setIsGroupMembersDialogOpen(true)}>
                  <Users className="h-4 w-4 mr-2" />
                  Manage Group
                </Button>
              )}
            </div>
          )}
          <div className="flex-1 p-6 space-y-4 overflow-y-auto">
            {selectedChat ? (
              messages.filter(m => m.participants.every(p => selectedChat.participants.includes(p))).map((message) => (
                <div key={message.id} className={`flex ${message.sender === 'You' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`p-3 rounded-lg ${message.sender === 'You' ? 'bg-purple-200' : 'bg-white'} max-w-[70%]`}>
                    {message.quotedMessage && (
                      <div className="bg-gray-100 p-2 rounded mb-2 text-sm">
                        <p className="font-semibold">{message.quotedMessage.sender}</p>
                        <p>{message.quotedMessage.message}</p>
                      </div>
                    )}
                    <p className="text-sm">{message.message}</p>
                    {message.attachment && (
                      <div className="mt-2">
                        {message.attachment.type.startsWith('image/') ? (
                          <img src={message.attachment.url} alt={message.attachment.name} className="max-w-full h-auto rounded" />
                        ) : message.attachment.type.startsWith('audio/') ? (
                          <div className="flex items-center space-x-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => togglePlayPause(message.attachment!.url)}
                            >
                              {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                            </Button>
                            <span className="text-sm">Voice Note</span>
                          </div>
                        ) : (
                          <a href={message.attachment.url} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">
                            {message.attachment.name}
                          </a>
                        )}
                      </div>
                    )}
                    <span className="text-xs text-gray-400 block mt-1">{message.time}</span>
                    {message.sender === 'You' && (
                      <div className="flex items-center justify-end mt-1">
                        <span className="text-xs text-gray-400 mr-1">
                          {message.readBy.length === selectedChat.participants.length ? 'Read by all' : `Read by ${message.readBy.length}`}
                        </span>
                        <Check className={`h-3 w-3 ${message.readBy.length > 1 ? 'text-green-500' : 'text-gray-400'}`} />
                      </div>
                    )}
                    {!selectedChat.isNewConversation && (
                      <Button variant="ghost" size="sm" onClick={() => handleReply(message)} className="mt-2">
                        <CornerUpLeft className="h-4 w-4 mr-1" />
                        Reply
                      </Button>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <div className="flex items-center justify-center h-full">
                <p className="text-gray-500">Select a chat to start messaging</p>
              </div>
            )}
          </div>
          {replyingTo && (
            <div className="px-4 py-2 bg-gray-100 flex justify-between items-center">
              <div>
                <p className="text-sm font-semibold">Replying to {replyingTo.sender}</p>
                <p className="text-sm text-gray-600">{replyingTo.message}</p>
              </div>
              <Button variant="ghost" size="sm" onClick={() => setReplyingTo(null)}>
                Cancel
              </Button>
            </div>
          )}
          {attachment && (
            <div className="px-4 py-2 bg-gray-100 flex items-center justify-between">
              <div className="flex items-center space-x-2">
                {attachmentPreview ? (
                  <img src={attachmentPreview} alt="Attachment preview" className="w-10 h-10 object-cover rounded" />
                ) : (
                  <Paperclip className="w-10 h-10 text-gray-400" />
                )}
                <span className="text-sm text-gray-600">{attachment.name}</span>
              </div>
              <Button variant="ghost" size="sm" onClick={handleRemoveAttachment}>
                Remove
              </Button>
            </div>
          )}
          {audioBlob && (
            <div className="px-4 py-2 bg-gray-100 flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Mic className="w-10 h-10 text-gray-400" />
                <span className="text-sm text-gray-600">Voice Note</span>
              </div>
              <Button variant="ghost" size="sm" onClick={() => setAudioBlob(null)}>
                Remove
              </Button>
            </div>
          )}
          <div className="p-4 border-t border-gray-200 flex items-center space-x-2">
            <Button variant="ghost" size="icon" onClick={handleAttachClick}>
              <Paperclip className="h-5 w-5" />
            </Button>
            <Input 
              type="text" 
              placeholder="Write message..." 
              className="flex-1" 
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            />
            {isRecording ? (
              <Button variant="destructive" size="icon" onClick={stopRecording}>
                <Square className="h-5 w-5" />
              </Button>
            ) : (
              <Button variant="ghost" size="icon" onClick={startRecording}>
                <Mic className="h-5 w-5" />
              </Button>
            )}
            {isRecording && (
              <span className="text-red-500 animate-pulse">
                Recording: {recordingTime}s
              </span>
            )}
            <Button onClick={handleSendMessage}>
              <Send className="h-5 w-5 mr-2" />
              Send
            </Button>
            <input
              type="file"
              ref={fileInputRef}
              className="hidden"
              onChange={handleFileChange}
            />
          </div>
        </div>
      )}
      <Dialog open={isGroupMembersDialogOpen} onOpenChange={setIsGroupMembersDialogOpen}>
        <DialogContent className="sm:max-w-[900px]">
          <DialogHeader>
            <DialogTitle>Manage Group</DialogTitle>
          </DialogHeader>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="col-span-1 flex flex-col items-center gap-4">
              <Avatar className="w-32 h-32 cursor-pointer" onClick={handleGroupAvatarClick}>
                <AvatarImage src={groupAvatarPreview || selectedChat?.groupAvatar || '/placeholder.svg?height=128&width=128'} alt="Group Avatar" />
                <AvatarFallback>G</AvatarFallback>
              </Avatar>
              <Button variant="outline" size="sm" onClick={handleGroupAvatarClick}>
                Change Avatar
              </Button>
              <input
                type="file"
                ref={groupAvatarInputRef}
                className="hidden"
                onChange={handleGroupAvatarChange}
                accept="image/*"
              />
              <div className="w-full">
                <Input
                  id="groupName"
                  value={groupName}
                  onChange={(e) => setGroupName(e.target.value)}
                  className="mb-2"
                  placeholder="Group Name"
                />
                <Button onClick={handleUpdateGroup} className="w-full mb-2">Update Group</Button>
                <Button onClick={handleDeleteGroup} className="w-full bg-red-500 hover:bg-red-600 text-white">
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete Group
                </Button>
              </div>
            </div>
            <div className="col-span-1">
              <h3 className="mb-2 font-semibold">Current Members</h3>
              <ScrollArea className="h-[300px] w-full rounded-md border p-4">
                {selectedChat?.participants.map((participant) => (
                  <div key={participant} className="flex items-center justify-between py-2">
                    <span>{participant}</span>
                    {participant !== 'You' && (
                      <Button variant="ghost" size="sm" onClick={() => handleRemoveParticipant(participant)}>
                        <UserMinus className="h-4 w-4 mr-2" />
                        Remove
                      </Button>
                    )}
                  </div>
                ))}
              </ScrollArea>
            </div>
            <div className="col-span-1">
              <h3 className="mb-2 font-semibold">Add New Members</h3>
              <Input
                type="text"
                placeholder="Search users..."
                value={participantSearchQuery}
                onChange={(e) => setParticipantSearchQuery(e.target.value)}
                className="mb-2"
              />
              <ScrollArea className="h-[300px] w-full rounded-md border p-4">
                {filteredUsers.map((user) => (
                  <div key={user.id} className="flex items-center justify-between py-2">
                    <span>{user.name}</span>
                    <Button variant="ghost" size="sm" onClick={() => handleAddParticipant(user)}>
                      <UserPlus className="h-4 w-4 mr-2" />
                      Add
                    </Button>
                  </div>
                ))}
              </ScrollArea>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      <Dialog open={showChatTypeDialog} onOpenChange={setShowChatTypeDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Choose Chat Type</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <RadioGroup defaultValue="group" onValueChange={(value) => setChatType(value as 'group' | 'one-off')}>
              <div className="flex items-center space-x-2 mb-2">
                <RadioGroupItem value="group" id="group" />
                <Label htmlFor="group">Start a Group Chat</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="one-off" id="one-off" />
                <Label htmlFor="one-off">Send a One-off Message</Label>
              </div>
            </RadioGroup>
          </div>
          {chatType === 'one-off' && (
            <div className="mt-4">
              <Label htmlFor="one-off-message">Message</Label>
              <Textarea
                id="one-off-message"
                placeholder="Type your message here..."
                value={oneOffMessage}
                onChange={(e) => setOneOffMessage(e.target.value)}
                className="mt-2"
              />
            </div>
          )}
          <Button onClick={() => createNewChat(chatType)} disabled={chatType === 'one-off' && oneOffMessage.trim() === ''}>
            Continue
          </Button>
        </DialogContent>
      </Dialog>
      <audio ref={audioRef} onEnded={() => setIsPlaying(false)} />
    </div>
  )
}
